sudo apt update
sudo apt install default-jdk -y
wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key |sudo gpg --dearmor -o /usr/share/keyrings/jenkins.gpg
sudo sh -c 'echo deb [signed-by=/usr/share/keyrings/jenkins.gpg] http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update
sudo apt install jenkins -y
sudo systemctl start jenkins.service
sudo systemctl status jenkins
sudo ufw allow 8080
sudo ufw allow OpenSSH
sudo ufw enable
sudo ufw status
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

==================================================================
On Jenkins server:
install docker with permission commands
--------------------------------------

sudo apt install docker.io -y
sudo snap install docker
sudo usermod -aG docker jenkins
sudo usermod -aG docker $USER
sudo chmod 777 /var/run/docker.sock

sudo service jenkins restart
sudo service docker restart
=============================================================================================

Go to jenkins Dash Board->enable plugin docker pipeline => manage Jenkins->manage plugins->search in available plugin ->Docker ->install with out restart
And then Go to manage jenkins->global tool configuration (Tools)-> add maven (maven installation)
give a Git Hub credentials in global credentials => manage Jenkins-> Manage credentials-> Click on System ->Click on Global-> click on add credentials -> create credentials with kind is username with password
give docker credentials in global credentials => manage Jenkins-> Manage credentials->Click on System->Click on Global credentials-> click on add credentials-> create credentials with kind is usernamewithpassword

Note: Id in the while creating credentials and registryCredential in the pipeline must be same




=============================================================================================================================================

pipeline {
    agent any
    tools {
        maven 'maven'
    }
    environment {
        registry = "cvaa/petclinic7"
        registryCredential = "DOCK_CRED"
        dockerImage = ''
    }

    stages {
        stage('git clone') {
            steps {
                checkout scmGit(branches: [[name: '*/main']],
                extensions: [], userRemoteConfigs: [[credentialsId: 'GIT_CRED',
                url: 'https://github.com/Cvaaaa/spring-petclinic-docker.git']])
            }
        }
        stage('UNIT Testing') {
            steps {
                sh 'mvn test'
            }
        }
        stage ('Maven Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Build app') {
            steps {
                script{
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                }
            }
        }
        
        stage('Deploy Image') {
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push()
                    }
                }
            }
        }
        
        stage('Remove Unused docker image') {
            steps{
                sh "docker rmi $registry:$BUILD_NUMBER"
                sh "docker run -d --name petclinic13 -p 8082:8080 $registry:$BUILD_NUMBER"
            }
        }
    }
}


============================================================================================================================================================
Note: click on pipeline syntex 
  Snippet Generator-> sample steps -> Search Checkout:checkout from the version control
                                      Paste to the git code in git repository URL and add git credentials -> specify the Branch Name -> And Then Generate Pipeline Script
            Ex: checkout scmGit(branches: [[name: '*/main']],
                extensions: [], userRemoteConfigs: [[credentialsId: 'GIT_CRED',
                url: 'https://github.com/Cvaaaa/spring-petclinic-docker.git']])
 

registry = "cvaa/petclinic7"  ----> 'cvaa' This is Docker hub user name and 'petclinic7' image name(You can put any name in that place).
      registryCredential = "DOCK_CRED" -----> "DOCK_CRED" This is your docker hub credential ID name (Global credential name)
